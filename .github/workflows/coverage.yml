name: coverage
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5.4.0
        with:
          python-version: "${{ matrix.python }}"
      - name: Install dependencies for test
        run: |
          make setup
          make setup_test
      - name: Unit test and coverage
        run: |
          make coverage
          pip install psycopg2==2.9.10
          RECHU_DATABASE_URI=postgresql+psycopg2://postgres:test@localhost:5432/postgres make coverage
      - name: Coveralls upload
        run: |
          pip install coveralls
          coveralls
        if: "${{ success() }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          COVERALLS_FLAG_NAME: python-${{ matrix.python }}
          COVERALLS_PARALLEL: true
    services:
      postgres:
        image: postgres:17.3
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        python:
        - '3.9.21'
        - '3.12.9'
  finish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5.4.0
        with:
          python-version: "${{ matrix.python }}"
      - name: Close parallel Coveralls build
        run: |
          pip install coveralls
          coveralls --finish
        if: "${{ success() }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Install dependencies for analysis
        run: |
          make setup
          make setup_analysis
      - name: Analysis and validation
        run: |
          make mypy
          make pylint
          scripts/validate_schema.sh samples receipt.yml
      - name: SonarQube scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    strategy:
      matrix:
        python:
          - '3.12.9'
