name: coverage
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5.6.0
        with:
          python-version: "${{ matrix.python }}"
      - name: Install uv
        uses: astral-sh/setup-uv@v6.7.0
        with:
          version: "0.8.22"
      - name: Install dependencies for test
        run: |
          uv venv .venv
          make setup
          make setup_test
      - name: Unit test and coverage
        id: coverage
        continue-on-error: true
        run: |
          source .venv/bin/activate
          TEST_NAME=sqlite-${{ matrix.python }} make -i coverage
          make setup_postgres
          TEST_NAME=postgresql-${{ matrix.python }} RECHU_DATABASE_URI=postgresql+psycopg2://postgres:test@localhost:5432/postgres make coverage
      - name: Coveralls upload
        uses: coverallsapp/github-action@v2.3.6
        if: "${{ success() }}"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          flag-name: "python-${{ matrix.python }}"
          parallel: true
          format: cobertura
          files: test-reports/cobertura-*.xml
      - name: Archive coverage results
        uses: actions/upload-artifact@v4.6.2
        with:
          name: "coverage-${{ matrix.python }}"
          path: test-reports
      - name: Set status
        if: steps.coverage.outcome == 'failure'
        env:
          COVERAGE_OUTCOME: ${{ steps.coverage.outcome }}
        run: |
          echo "Unit test and coverage: $COVERAGE_OUTCOME"
          exit 1
    services:
      postgres:
        image: postgres:17.3
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        python:
        - '3.9.23'
        - '3.13.5'
  finish-no-python:
    needs: test
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Close parallel Coveralls build
        uses: coverallsapp/github-action@v2.3.6
        if: "${{ success() }}"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          parallel-finished: true
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Code style formatting (shellcheck and shfmt)
        uses: luizm/action-sh-checker@v0.9.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHFMT_OPTS: -i 4
        with:
          sh_checker_comment: true
          sh_checker_exclude: ".venv"
  finish:
    needs: test
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5.6.0
        with:
          python-version: "${{ matrix.python }}"
      - name: Install uv
        uses: astral-sh/setup-uv@v6.7.0
        with:
          version: "0.8.22"
      - name: Install dependencies for analysis
        run: |
          uv venv .venv
          make setup
          make setup_analysis
      - name: Typing analysis and coverage (mypy)
        if: "${{ always() }}"
        run: |
          source .venv/bin/activate
          make mypy
      - name: Typing analysis (basedpyright)
        if: "${{ always() }}"
        run: |
          source .venv/bin/activate
          make pyright
      - name: Code style formatting (pylint)
        if: "${{ always() }}"
        shell: bash
        run: |
          source .venv/bin/activate
          make pylint | tee pylint-report.txt
      - name: Code style formatting (ruff)
        if: "${{ always() }}"
        shell: bash
        run: |
          source .venv/bin/activate
          set +e
          make ruff
          if [ $? -ne 0 ]; then make ruff RUFF="ruff check --output-format=json --output-file=ruff-report.json"; make ruff RUFF="ruff check --output-format=github"; fi
      - name: Schema validation
        if: "${{ always() }}"
        run: |
          source .venv/bin/activate
          scripts/validate_schema.sh samples receipt.yml products-*.yml
      - name: Collect coverage results
        if: "${{ always() }}"
        uses: actions/download-artifact@v4.3.0
        with:
          pattern: coverage-*
          path: test-reports
          merge-multiple: true
      - name: SonarQube scan
        if: "${{ always() }}"
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    strategy:
      matrix:
        python:
          - '3.13.5'
